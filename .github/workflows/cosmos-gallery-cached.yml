name: Cosmos Gallery cached -> gallery.json

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"   # hourly

jobs:
  scrape:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      URLS: >
        https://www.cosmos.so/rlphoto/swim,
        https://www.cosmos.so/rlphoto/studio-tests,
        https://www.cosmos.so/rlphoto/studio-test-feminine,
        https://www.cosmos.so/rlphoto/swim-resort,
        https://www.cosmos.so/rlphoto/location-tests
      MAX_SCROLLS: 200
      WAIT_BETWEEN: 1000
      FIRST_IDLE: 9000
      STABLE_CHECKS: 6
      # Put Playwright browsers where we can cache them
      PLAYWRIGHT_BROWSERS_PATH: "~/.cache/ms-playwright"

    steps:
      - name: Checkout repository (force latest main)
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          clean: true

      - name: Use Node.js 20 + cache npm
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # (Optional) Cache node_modules for maximum speed
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      # Cache Playwright browser binaries (Chromium/FFmpeg)
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/.cache/playwright
          key: ms-playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ms-playwright-${{ runner.os }}-

      - name: Install dependencies (reproducible)
        run: |
          npm ci

      # If cache missed, this will download once and then be cached
      - name: Install Playwright (Chromium + deps)
        run: |
          npx playwright install --with-deps chromium

      - name: Scrape all Cosmos pages
        run: |
          IFS=',' read -ra arr <<< "${URLS}"
          mkdir -p public
          for u in "${arr[@]}"; do
            u=$(echo "$u" | xargs)
            slug=$(basename "$u")
            echo "Scraping $u -> public/${slug}.json"
            COSMOS_URL="$u" OUT_FILE="public/${slug}.json" \
            MAX_SCROLLS="${MAX_SCROLLS}" WAIT_BETWEEN="${WAIT_BETWEEN}" FIRST_IDLE="${FIRST_IDLE}" STABLE_CHECKS="${STABLE_CHECKS}" \
            npm run scrape
          done

      # Deduplicate results to remove doubles
      - name: Deduplicate JSON outputs
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const PUB = path.resolve(process.cwd(), 'public');
          if (!fs.existsSync(PUB)) process.exit(0);
          const files = fs.readdirSync(PUB).filter(f => f.endsWith('.json'));
          const SKIP_AVATAR = /cdn\.cosmos\.so\/default-avatars\//i;
          const norm = (url) => {
            try { const u = new URL(url);
              return `${u.protocol}//${u.host.toLowerCase()}${u.pathname}`;
            } catch { return null; }
          };
          for (const file of files) {
            const full = path.join(PUB, file);
            let data; try { data = JSON.parse(fs.readFileSync(full, 'utf8')); } catch { continue; }
            const list = Array.isArray(data) ? data : Array.isArray(data.items) ? data.items : [];
            const seen = new Set(); const out = [];
            for (const it of list) {
              const raw = it?.src || it?.url || it?.image || it?.href; if (!raw) continue;
              if (SKIP_AVATAR.test(raw)) continue;
              const src = norm(raw); if (!src) continue;
              const type = (it.type || (/\.(mp4|webm|m4v|mov)(\?|$)/i.test(raw) ? 'video' : 'image')).toLowerCase();
              const key = `${type}:${src}`; if (seen.has(key)) continue;
              seen.add(key);
              const item = { ...it, type, src };
              if (item.poster) { const p = norm(item.poster); if (p) item.poster = p; }
              out.push(item);
            }
            let finalObj = data;
            if (Array.isArray(data)) finalObj = out;
            else if (Array.isArray(data.items)) finalObj = { ...data, items: out, count: out.length };
            else finalObj = out;
            fs.writeFileSync(full, JSON.stringify(finalObj, null, 2));
            console.log(`âœ” ${file}: ${list.length} -> ${out.length}`);
          }
          NODE

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
